<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZJ的后花园</title>
  
  <subtitle>技术博客/狗头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-05T13:45:24.796Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhujie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;随笔&gt;2020.9.6</title>
    <link href="http://yoursite.com/2020/09/05/lesssui-bi-greater202096/"/>
    <id>http://yoursite.com/2020/09/05/lesssui-bi-greater202096/</id>
    <published>2020-09-05T13:39:20.000Z</published>
    <updated>2020-09-05T13:45:24.796Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;居然有人要我多写随笔，那我就每周日更新吧&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;算法&gt;高精度阶乘和快速幂</title>
    <link href="http://yoursite.com/2020/09/05/lesssuan-fa-greatergao-jing-du-jie-cheng-he-kuai-su-mi/"/>
    <id>http://yoursite.com/2020/09/05/lesssuan-fa-greatergao-jing-du-jie-cheng-he-kuai-su-mi/</id>
    <published>2020-09-05T08:08:55.000Z</published>
    <updated>2020-09-05T13:45:40.618Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;其实就是高精度乘以单精度的算法&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;随笔&gt;2020.8</title>
    <link href="http://yoursite.com/2020/08/23/lesssui-bi-greater20208/"/>
    <id>http://yoursite.com/2020/08/23/lesssui-bi-greater20208/</id>
    <published>2020-08-23T13:57:43.000Z</published>
    <updated>2020-08-23T14:41:23.249Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我感受到了前所未有的压迫感…&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;算法&gt;生成排列和生成组合</title>
    <link href="http://yoursite.com/2020/08/18/lesssuan-fa-greatersheng-cheng-pai-lie-he-sheng-cheng-zu-he/"/>
    <id>http://yoursite.com/2020/08/18/lesssuan-fa-greatersheng-cheng-pai-lie-he-sheng-cheng-zu-he/</id>
    <published>2020-08-18T14:22:56.000Z</published>
    <updated>2020-08-19T14:33:49.918Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;和组合数学一样的内容，但是我决定分成两块，&amp;lt;组合数学&amp;gt;写理论，&amp;lt;算法&amp;gt;写C++实现，以后复习数论或组合数学的知识都会尝试用C++实现以下，然后扔到&amp;lt;算法&amp;gt;里&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;组合数学&gt;生成排列和生成组合</title>
    <link href="http://yoursite.com/2020/08/18/lesszu-he-shu-xue-greatersheng-cheng-pai-lie-he-sheng-cheng-zu-he/"/>
    <id>http://yoursite.com/2020/08/18/lesszu-he-shu-xue-greatersheng-cheng-pai-lie-he-sheng-cheng-zu-he/</id>
    <published>2020-08-18T10:10:45.000Z</published>
    <updated>2020-08-19T14:31:49.359Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;其实这是算法的内容，不过我主要懒得把C++实现写了，所以我就把这块先放到组合数学里去了&lt;br&gt;
    
    </summary>
    
    
      <category term="组合数学" scheme="http://yoursite.com/categories/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;算法&gt;n!的素因数分解</title>
    <link href="http://yoursite.com/2020/08/17/lesssuan-fa-greaternde-su-yin-shu-fen-jie/"/>
    <id>http://yoursite.com/2020/08/17/lesssuan-fa-greaternde-su-yin-shu-fen-jie/</id>
    <published>2020-08-17T14:32:59.000Z</published>
    <updated>2020-08-17T14:58:32.970Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;众所周知$n!$是一个增长速度及其快的函数，比如$15!$的数量级就是$10$的$12$次方了，对大数的素因数分解一直都是比较困难的，但是对$n!$来说有特殊的算法可以实现快速地实现素因数分解&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;组合数学&gt;鸽巢原理</title>
    <link href="http://yoursite.com/2020/08/15/lesszu-he-shu-xue-greaterge-chao-yuan-li/"/>
    <id>http://yoursite.com/2020/08/15/lesszu-he-shu-xue-greaterge-chao-yuan-li/</id>
    <published>2020-08-15T03:54:03.000Z</published>
    <updated>2020-08-16T05:11:00.035Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我觉得鸽巢原理是一个看似非常笨比但是使用非常广泛的原理，包括在我学初等数论的时候也经常能够看到鸽巢原理在证明中的应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="组合数学" scheme="http://yoursite.com/categories/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;组合数学&gt;排列与组合</title>
    <link href="http://yoursite.com/2020/08/12/lesszu-he-shu-xue-greaterpai-lie-yu-zu-he/"/>
    <id>http://yoursite.com/2020/08/12/lesszu-he-shu-xue-greaterpai-lie-yu-zu-he/</id>
    <published>2020-08-12T08:28:37.000Z</published>
    <updated>2020-08-19T14:58:45.263Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;初等数论大体上是学完了，现在每天复习巩固就行了，现在开始组合数学的学习，第一章大致上都是高中的内容，就当复习了，然后这章所有的内容不额外开一篇新的文章了，全部更新在这篇文章下面。&lt;br&gt;
    
    </summary>
    
    
      <category term="组合数学" scheme="http://yoursite.com/categories/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;原根的存在性和指数</title>
    <link href="http://yoursite.com/2020/08/10/lessshu-lun-greateryuan-gen-de-cun-zai-xing-he-zhi-shu/"/>
    <id>http://yoursite.com/2020/08/10/lessshu-lun-greateryuan-gen-de-cun-zai-xing-he-zhi-shu/</id>
    <published>2020-08-10T07:17:32.000Z</published>
    <updated>2020-08-10T08:00:40.745Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原根的存在性真的看得我头皮发麻，所以这边直接放结论了，这章主要写写和指数有关的知识&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;面向对象&gt;操作符重载</title>
    <link href="http://yoursite.com/2020/08/09/lessmian-xiang-dui-xiang-greatercao-zuo-fu-chong-zai/"/>
    <id>http://yoursite.com/2020/08/09/lessmian-xiang-dui-xiang-greatercao-zuo-fu-chong-zai/</id>
    <published>2020-08-09T13:59:36.000Z</published>
    <updated>2020-08-09T15:40:14.625Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本来想把前面三章都整理一遍的，但是工作量太大了，所以我决定边学边写，以后和操作符重载有关的内容就都写在这里了&lt;br&gt;
    
    </summary>
    
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;阶和原根</title>
    <link href="http://yoursite.com/2020/08/07/lessshu-lun-greaterjie-he-yuan-gen/"/>
    <id>http://yoursite.com/2020/08/07/lessshu-lun-greaterjie-he-yuan-gen/</id>
    <published>2020-08-07T11:20:36.000Z</published>
    <updated>2020-08-09T15:46:33.268Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;先写一下之前没写的欧拉定理，然后讲讲阶和原根，说实话这一章我学的真的挺懵的，后面会涉及原根的存在性问题和素性判断&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;莫比乌斯反演</title>
    <link href="http://yoursite.com/2020/08/05/lessshu-lun-greatermo-bi-wu-si-fan-yan/"/>
    <id>http://yoursite.com/2020/08/05/lessshu-lun-greatermo-bi-wu-si-fan-yan/</id>
    <published>2020-08-05T11:38:28.000Z</published>
    <updated>2020-08-09T15:46:36.785Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在之前学积性函数的时候会看到诸如$F(n)=\sum_{d|n}{f(d)}$的式子，其中 $f$ 是积性函数，这个式子是知道 $f(n)$ 推导其和函数，那么我们能不能知道和函数 $F(n)$ 反推 $f$ 呢？利用莫比乌斯反演可以实现这一过程&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;完全数和梅森素数</title>
    <link href="http://yoursite.com/2020/08/04/lessshu-lun-greaterwan-quan-shu-he-mei-sen-su-shu/"/>
    <id>http://yoursite.com/2020/08/04/lessshu-lun-greaterwan-quan-shu-he-mei-sen-su-shu/</id>
    <published>2020-08-04T07:45:03.000Z</published>
    <updated>2020-08-09T15:46:48.551Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由之前学的积性函数，开始学习另外的两个积性函数，然后讲讲梅森素数，是一个非常有趣的方向&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;积性函数</title>
    <link href="http://yoursite.com/2020/08/03/lessshu-lun-greatercheng-xing-han-shu/"/>
    <id>http://yoursite.com/2020/08/03/lessshu-lun-greatercheng-xing-han-shu/</id>
    <published>2020-08-03T09:06:04.000Z</published>
    <updated>2020-08-09T15:46:16.058Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一章开始学习数论函数，从欧拉函数到因子、因子数函数，我觉得这一章还是比较好理解的&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;随笔&gt;2020.7</title>
    <link href="http://yoursite.com/2020/08/02/sui-bi-20207/"/>
    <id>http://yoursite.com/2020/08/02/sui-bi-20207/</id>
    <published>2020-08-02T14:47:36.000Z</published>
    <updated>2020-08-23T14:47:40.198Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;不出意外的话以后每个月都写篇随笔吧，总结一下这个月干了什么，以及接下来想干什么。本来也没打算写随笔，但是最近确实太累了，学的也有点乱，写篇随笔理理思路，顺便消磨一下时间。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;线性同余方程和中国剩余定理</title>
    <link href="http://yoursite.com/2020/07/31/lessshu-lie-greaterxian-xing-tong-yu-fang-cheng/"/>
    <id>http://yoursite.com/2020/07/31/lessshu-lie-greaterxian-xing-tong-yu-fang-cheng/</id>
    <published>2020-07-31T11:40:54.000Z</published>
    <updated>2020-08-09T15:46:11.212Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性同余方程&quot;&gt;&lt;a href=&quot;#线性同余方程&quot; class=&quot;headerlink&quot; title=&quot;线性同余方程&quot;&gt;&lt;/a&gt;线性同余方程&lt;/h1&gt;&lt;p&gt;对于形如 $ax\equiv b\pmod m$的同余式称为一元线性同余方程&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;算法&gt;快速排序和高精度运算</title>
    <link href="http://yoursite.com/2020/07/31/lesssuan-fa-greaterkuai-su-pai-xu-he-gao-jing-du-yun-suan/"/>
    <id>http://yoursite.com/2020/07/31/lesssuan-fa-greaterkuai-su-pai-xu-he-gao-jing-du-yun-suan/</id>
    <published>2020-07-31T08:39:02.000Z</published>
    <updated>2020-08-09T15:47:43.164Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近新学的两个算法，快速排序和高精度运算，快速排序的整体思想还是非常高级的，然后写写高精度运算来深入地理解一下乘除法&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>洛谷 P1011 车站</title>
    <link href="http://yoursite.com/2020/07/30/luo-gu-p1011-che-zhan/"/>
    <id>http://yoursite.com/2020/07/30/luo-gu-p1011-che-zhan/</id>
    <published>2020-07-30T11:55:10.000Z</published>
    <updated>2020-08-09T15:47:14.659Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;火车从始发站（称为第$1$站）开出，在始发站上车的人数为$a$，然后到达第$2$站，在第$2$站有人上、下车，但上、下车的人数相同，因此在第$2$站开出时（即在到达第3站之前）车上的人数保持为$a$人。从第$3$站起（包括第$3$站）上、下车的人数有一定规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第$(n-1)$站），都满足此规律。现给出的条件是：共有$n$个车站，始发站上车的人数为$b$，最后一站下车的人数是$m$（全部下车）。试问$x$站开出时车上的人数是多少？&lt;br&gt;
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>NOIP模拟  遭遇战</title>
    <link href="http://yoursite.com/2020/07/29/noip-mo-ni-zao-yu-zhan/"/>
    <id>http://yoursite.com/2020/07/29/noip-mo-ni-zao-yu-zhan/</id>
    <published>2020-07-29T10:00:03.000Z</published>
    <updated>2020-08-09T15:47:26.648Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;小林和小华在一个$n\times n$的矩形方格里玩游戏，矩形左上角为$(0,0)$，右下角为$(n-1,n-1)$。两人同时进入地图的随机位置，并以相同速度进行走位。为了隐蔽性，两人都不会再走自己走过的格子。如果两人向某一方向前进，那么他们会跑到不能跑为止，当不能跑的时候，小林会向右转，小华会向左转，如果不能跑，则不再动。现在已知两人进去地图的初始位置和方向，请算出两人遭遇的位置。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数论&gt;同余和模指数运算</title>
    <link href="http://yoursite.com/2020/07/27/lessshu-lun-greatertong-yu-he-mo-zhi-shu-yun-suan/"/>
    <id>http://yoursite.com/2020/07/27/lessshu-lun-greatertong-yu-he-mo-zhi-shu-yun-suan/</id>
    <published>2020-07-27T10:33:15.000Z</published>
    <updated>2020-08-09T15:46:44.867Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开始学到数论中一个相当重要的理论了，整个同余理论在数论中的出现还是非常多的。讲讲什么是同余和同余的一些性质&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
</feed>
